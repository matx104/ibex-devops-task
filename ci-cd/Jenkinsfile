// Jenkinsfile - Simple Jenkins CI/CD Pipeline

pipeline {
    agent any
    
    environment {
        // Docker Hub credentials
        DOCKER_HUB_CREDENTIALS = credentials('docker-hub-creds')
        DOCKER_IMAGE_NAME = 'ibex-webapp'
        DOCKER_HUB_REPO = "${DOCKER_HUB_CREDENTIALS_USR}/${DOCKER_IMAGE_NAME}"
        
        // EC2 configuration
        EC2_SSH_KEY = credentials('ec2-ssh-key')
        EC2_PUBLIC_IP = credentials('ec2-public-ip')
        EC2_USER = 'ec2-user'
        
        // S3 bucket
        S3_BUCKET = credentials('s3-bucket-name')
    }
    
    parameters {
        choice(
            name: 'ENVIRONMENT',
            choices: ['dev', 'staging', 'prod'],
            description: 'Deployment environment'
        )
        booleanParam(
            name: 'SKIP_TESTS',
            defaultValue: false,
            description: 'Skip tests'
        )
    }
    
    triggers {
        // Trigger on GitHub push
        githubPush()
    }
    
    stages {
        stage('Checkout') {
            steps {
                checkout scm
                script {
                    env.GIT_COMMIT_SHORT = sh(
                        script: "git rev-parse --short HEAD",
                        returnStdout: true
                    ).trim()
                    env.BUILD_TAG = "${params.ENVIRONMENT}-${env.BUILD_NUMBER}-${env.GIT_COMMIT_SHORT}"
                }
            }
        }
        
        stage('Build Docker Image') {
            steps {
                sh """
                    docker build -t ${DOCKER_HUB_REPO}:${env.BUILD_TAG} .
                    docker tag ${DOCKER_HUB_REPO}:${env.BUILD_TAG} ${DOCKER_HUB_REPO}:${params.ENVIRONMENT}
                    docker tag ${DOCKER_HUB_REPO}:${env.BUILD_TAG} ${DOCKER_HUB_REPO}:latest
                """
            }
        }
        
        stage('Test') {
            when {
                expression { params.SKIP_TESTS != true }
            }
            steps {
                sh """
                    # Start test container
                    docker run -d --name test-container -p 8080:80 ${DOCKER_HUB_REPO}:${env.BUILD_TAG}
                    sleep 10
                    
                    # Test HTTP response
                    curl -f http://localhost:8080 || exit 1
                    
                    # Cleanup
                    docker stop test-container
                    docker rm test-container
                """
            }
        }
        
        stage('Push to Docker Hub') {
            steps {
                sh """
                    echo ${DOCKER_HUB_CREDENTIALS_PSW} | docker login -u ${DOCKER_HUB_CREDENTIALS_USR} --password-stdin
                    docker push ${DOCKER_HUB_REPO}:${env.BUILD_TAG}
                    docker push ${DOCKER_HUB_REPO}:${params.ENVIRONMENT}
                    docker push ${DOCKER_HUB_REPO}:latest
                    docker logout
                """
            }
        }
        
        stage('Deploy to EC2') {
            steps {
                sh """
                    # Create deployment script
                    cat > deploy.sh << 'EOF'
#!/bin/bash
set -e

echo "Starting deployment..."

# Login to Docker Hub
echo "${DOCKER_HUB_CREDENTIALS_PSW}" | docker login -u ${DOCKER_HUB_CREDENTIALS_USR} --password-stdin

# Stop existing container
docker stop ${DOCKER_IMAGE_NAME} 2>/dev/null || true
docker rm ${DOCKER_IMAGE_NAME} 2>/dev/null || true

# Pull and run new image
docker pull ${DOCKER_HUB_REPO}:${params.ENVIRONMENT}
docker run -d \\
    --name ${DOCKER_IMAGE_NAME} \\
    -p 80:80 \\
    --restart unless-stopped \\
    ${DOCKER_HUB_REPO}:${params.ENVIRONMENT}

# Verify deployment
sleep 5
if curl -f http://localhost; then
    echo "Deployment successful!"
else
    echo "Deployment failed!"
    exit 1
fi

docker logout
EOF

                    # Copy and execute on EC2
                    scp -i ${EC2_SSH_KEY} -o StrictHostKeyChecking=no deploy.sh ${EC2_USER}@${EC2_PUBLIC_IP}:/tmp/
                    ssh -i ${EC2_SSH_KEY} -o StrictHostKeyChecking=no ${EC2_USER}@${EC2_PUBLIC_IP} 'chmod +x /tmp/deploy.sh && /tmp/deploy.sh'
                """
            }
        }
        
        stage('Health Check') {
            steps {
                sh """
                    # Wait and test the deployed application
                    sleep 10
                    response=\$(curl -s -o /dev/null -w "%{http_code}" http://${EC2_PUBLIC_IP})
                    if [ "\$response" = "200" ]; then
                        echo "Health check passed!"
                    else
                        echo "Health check failed with status: \$response"
                        exit 1
                    fi
                """
            }
        }
    }
    
    post {
        always {
            sh """
                # Cleanup local images
                docker rmi ${DOCKER_HUB_REPO}:${env.BUILD_TAG} || true
                docker system prune -f || true
            """
        }
        
        success {
            echo "Pipeline completed successfully!"
            echo "Application is running at: http://${EC2_PUBLIC_IP}"
        }
        
        failure {
            echo "Pipeline failed!"
        }
    }
}
