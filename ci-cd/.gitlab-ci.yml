# .gitlab-ci.yml - GitLab CI/CD Pipeline Configuration

variables:
  DOCKER_IMAGE_NAME: "ibex-webapp"
  DOCKER_HUB_REPO: "${CI_REGISTRY_USER}/${DOCKER_IMAGE_NAME}"
  AWS_DEFAULT_REGION: "us-east-1"
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: "/certs"

stages:
  - validate
  - build
  - test
  - push
  - deploy
  - verify

# Cache Docker layers
cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - .docker/

before_script:
  - echo "Starting pipeline for branch ${CI_COMMIT_REF_NAME}"
  - export BUILD_TAG="${CI_PIPELINE_ID}-${CI_COMMIT_SHORT_SHA}"

# Validate stage
validate:dockerfile:
  stage: validate
  image: hadolint/hadolint:latest-alpine
  script:
    - echo "Validating Dockerfile..."
    - hadolint Dockerfile || true
  allow_failure: true

validate:security:
  stage: validate
  image: aquasec/trivy:latest
  script:
    - echo "Scanning for vulnerabilities..."
    - trivy fs --exit-code 0 --severity HIGH,CRITICAL .
  allow_failure: true

# Build stage
build:docker:
  stage: build
  image: docker:latest
  services:
    - docker:dind
  script:
    - echo "Building Docker image with tag ${BUILD_TAG}"
    - docker build -t ${DOCKER_HUB_REPO}:${BUILD_TAG} .
    - docker tag ${DOCKER_HUB_REPO}:${BUILD_TAG} ${DOCKER_HUB_REPO}:latest
    - docker tag ${DOCKER_HUB_REPO}:${BUILD_TAG} ${DOCKER_HUB_REPO}:${CI_COMMIT_REF_NAME}
    # Save image for next stages
    - mkdir -p .docker
    - docker save ${DOCKER_HUB_REPO}:${BUILD_TAG} -o .docker/image.tar
  artifacts:
    paths:
      - .docker/
    expire_in: 1 hour

# Test stage
test:container:
  stage: test
  image: docker:latest
  services:
    - docker:dind
  dependencies:
    - build:docker
  script:
    - echo "Loading and testing Docker image..."
    - docker load -i .docker/image.tar
    - docker run -d --name test-container -p 8080:80 ${DOCKER_HUB_REPO}:${BUILD_TAG}
    - sleep 5
    - docker exec test-container curl -f http://localhost || (docker logs test-container && exit 1)
    - docker stop test-container
    - docker rm test-container
  except:
    variables:
      - $SKIP_TESTS == "true"

test:security:
  stage: test
  image: aquasec/trivy:latest
  services:
    - docker:dind
  dependencies:
    - build:docker
  script:
    - echo "Scanning Docker image for vulnerabilities..."
    - docker load -i .docker/image.tar
    - trivy image --exit-code 0 --severity HIGH,CRITICAL ${DOCKER_HUB_REPO}:${BUILD_TAG}
  allow_failure: true

# Push stage
push:dockerhub:
  stage: push
  image: docker:latest
  services:
    - docker:dind
  dependencies:
    - build:docker
  script:
    - echo "Pushing image to Docker Hub..."
    - docker load -i .docker/image.tar
    - echo ${CI_REGISTRY_PASSWORD} | docker login -u ${CI_REGISTRY_USER} --password-stdin
    - docker push ${DOCKER_HUB_REPO}:${BUILD_TAG}
    - docker push ${DOCKER_HUB_REPO}:latest
    - docker push ${DOCKER_HUB_REPO}:${CI_COMMIT_REF_NAME}
    - docker logout
  only:
    - main
    - develop
    - /^release\/.*$/

# Deploy stages
.deploy_template: &deploy_definition
  stage: deploy
  image: alpine:latest
  before_script:
    - apk add --no-cache openssh-client curl
    - eval $(ssh-agent -s)
    - echo "${EC2_SSH_PRIVATE_KEY}" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan -H ${EC2_HOST} >> ~/.ssh/known_hosts
  script:
    - echo "Deploying to ${ENVIRONMENT} environment..."
    - |
      ssh ec2-user@${EC2_HOST} << EOF
        set -e
        echo "Starting deployment of ${DOCKER_HUB_REPO}:${CI_COMMIT_REF_NAME}"
        
        # Login to Docker Hub
        echo "${CI_REGISTRY_PASSWORD}" | docker login -u ${CI_REGISTRY_USER} --password-stdin
        
        # Stop and remove existing container
        docker stop ${DOCKER_IMAGE_NAME} 2>/dev/null || true
        docker rm ${DOCKER_IMAGE_NAME} 2>/dev/null || true
        
        # Pull new image
        docker pull ${DOCKER_HUB_REPO}:${CI_COMMIT_REF_NAME}
        
        # Run new container
        docker run -d \
          --name ${DOCKER_IMAGE_NAME} \
          -p 80:80 \
          --restart unless-stopped \
          ${DOCKER_HUB_REPO}:${CI_COMMIT_REF_NAME}
        
        # Verify deployment
        sleep 5
        curl -f http://localhost || exit 1
        
        # Log deployment
        echo "Deployed at \$(date)" > /tmp/deployment.log
        aws s3 cp /tmp/deployment.log s3://${S3_BUCKET}/deployments/\$(date +%Y%m%d_%H%M%S).log
        
        # Logout
        docker logout
      EOF

deploy:dev:
  <<: *deploy_definition
  environment:
    name: development
    url: http://${EC2_HOST_DEV}
  variables:
    ENVIRONMENT: "dev"
    EC2_HOST: ${EC2_HOST_DEV}
    S3_BUCKET: ${S3_BUCKET_DEV}
  only:
    - develop
  when: manual

deploy:staging:
  <<: *deploy_definition
  environment:
    name: staging
    url: http://${EC2_HOST_STAGING}
  variables:
    ENVIRONMENT: "staging"
    EC2_HOST: ${EC2_HOST_STAGING}
    S3_BUCKET: ${S3_BUCKET_STAGING}
  only:
    - main
  when: manual

deploy:prod:
  <<: *deploy_definition
  environment:
    name: production
    url: http://${EC2_HOST_PROD}
  variables:
    ENVIRONMENT: "prod"
    EC2_HOST: ${EC2_HOST_PROD}
    S3_BUCKET: ${S3_BUCKET_PROD}
  only:
    - /^release\/.*$/
    - tags
  when: manual

# Verify stage
verify:health:
  stage: verify
  image: curlimages/curl:latest
  script:
    - echo "Performing health check..."
    - |
      for i in 1 2 3 4 5; do
        if curl -f http://${EC2_HOST}; then
          echo "Application is healthy!"
          exit 0
        fi
        echo "Attempt $i failed, retrying..."
        sleep 10
      done
      echo "Health check failed after 5 attempts"
      exit 1
  dependencies: []
  needs: ["deploy:dev", "deploy:staging", "deploy:prod"]
  when: on_success

verify:smoke:
  stage: verify
  image: alpine:latest
  script:
    - apk add --no-cache curl
    - echo "Running smoke tests..."
    - |
      response=$(curl -s -o /dev/null -w "%{http_code}" http://${EC2_HOST})
      if [ "$response" != "200" ]; then
        echo "ERROR: Unexpected HTTP response: $response"
        exit 1
      fi
    - curl -s http://${EC2_HOST} | grep -q "nginx" || echo "WARNING: Expected content not found"
    - echo "Smoke tests passed!"
  dependencies: []
  needs: ["deploy:dev", "deploy:staging", "deploy:prod"]
  when: on_success

# Rollback job (manual trigger)
rollback:
  stage: deploy
  image: alpine:latest
  before_script:
    - apk add --no-cache openssh-client
    - eval $(ssh-agent -s)
    - echo "${EC2_SSH_PRIVATE_KEY}" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan -H ${EC2_HOST} >> ~/.ssh/known_hosts
  script:
    - echo "Rolling back to previous version..."
    - |
      ssh ec2-user@${EC2_HOST} << EOF
        # Get previous image tag
        PREVIOUS_TAG=\$(docker images ${DOCKER_HUB_REPO} --format "{{.Tag}}" | grep -v latest | head -2 | tail -1)
        
        if [ -z "\$PREVIOUS_TAG" ]; then
          echo "No previous version found!"
          exit 1
        fi
        
        echo "Rolling back to ${DOCKER_HUB_REPO}:\$PREVIOUS_TAG"
        
        # Stop current container
        docker stop ${DOCKER_IMAGE_NAME}
        docker rm ${DOCKER_IMAGE_NAME}
        
        # Run previous version
        docker run -d \
          --name ${DOCKER_IMAGE_NAME} \
          -p 80:80 \
          --restart unless-stopped \
          ${DOCKER_HUB_REPO}:\$PREVIOUS_TAG
        
        echo "Rollback completed!"
      EOF
  when: manual
  only:
    - main
    - develop
    - /^release\/.*$/